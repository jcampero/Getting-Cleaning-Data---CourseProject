{
    "contents" : "run_analysis <- function() {\n    \n## Getting & Cleaning Data Course Project\n##\n## This script performs the following tasks:\n##  1) Get/merge training/test data sets from the link\n##      https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip\n##  2) Extract the mean and standard deviation for each measurement\n##  3) Rename the activities in the data set with descriptive activity names\n##  4) Label the data set with descriptive variable names\n##  5) Create a tidy data set with the average of each variable/activity/subject combination\n    \n## Step 1 - If not previously downloaded (!file.exists), get collected data from\n##          the above URL and store it in ./data/Dataset.zip file.\n##\n##          Extract relevant data from it and store in corresponding datasets.\n##          Once collected, construct the main dataset binding columns & rows\n##          (subject + activity + data) for each set (test + train)\n  \n    cat(\"Analysis started.\\n\")\n    fileURL <- \"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip\"\n    fileSep <- .Platform$file.sep\n    directory <- paste(\".\", \"data\", sep=fileSep)\n    fileDest <- paste(directory, \"Dataset.zip\", sep=fileSep)\n    \n    if(!file.exists(directory))\n        dir.create(directory)\n    if(!file.exists(fileDest))\n    {\n        cat(paste(\"Downloading file from:\",fileURL,\"\\n\"))\n        download.file(fileURL, fileDest, method=\"curl\")\n    }\n    cat(\"Processing data:\\n\")\n    dataset_path <- \"UCI\\ HAR\\ Dataset\"\n    activitylabels_path <- paste(dataset_path, \"activity_labels.txt\", sep=fileSep)\n    features_path <- paste(dataset_path, \"features.txt\", sep=fileSep)\n    testdata_path <- paste(dataset_path, \"test\", \"X_test.txt\", sep=fileSep)\n    testlabels_path <- paste(dataset_path, \"test\", \"y_test.txt\", sep=fileSep)\n    testsubject_path <- paste(dataset_path, \"test\", \"subject_test.txt\", sep=fileSep)\n    traindata_path <- paste(dataset_path, \"train\", \"X_train.txt\", sep=fileSep)\n    trainlabels_path <- paste(dataset_path, \"train\", \"y_train.txt\", sep=fileSep)\n    trainsubject_path <- paste(dataset_path, \"train\", \"subject_train.txt\", sep=fileSep)\n    \n    activity_labels <- read.table(unz(fileDest, activitylabels_path))\n    features <- read.table(unz(fileDest, features_path))\n    cat(\"\\tProcessing test data set\\n\")\n    test_dataset <- read.table(unz(fileDest, testdata_path))\n    test_labels <- read.table(unz(fileDest, testlabels_path))\n    test_subject <- read.table(unz(fileDest, testsubject_path))\n    cat(\"\\tProcessing train data set\\n\")\n    train_dataset <- read.table(unz(fileDest, traindata_path))\n    train_labels <- read.table(unz(fileDest, trainlabels_path))\n    train_subject <- read.table(unz(fileDest, trainsubject_path))\n\n    main_dataset <- rbind(cbind(test_subject,test_labels,test_dataset),\n                          cbind(train_subject,train_labels,train_dataset))\n \n## Step 2 - To extract mean and standard deviation for each measurment, first\n##          rename columns (subject + activity + features**) in order to scan\n##          columns containing (mean or std) \n##              ** replacing with underscores any invalid characters in variable names\n##\n##          And then only keep the first 2 columns + columns containing \"mean\" or \"std\"\n\n    colnames(main_dataset) <- c(\"Subject\",\"Activity\",gsub(\"-|\\\\(|\\\\)|,\",\"_\",features$V2))\n\n    keep_keywords <- c(\"Subject\", \"Activity\", \"mean\", \"std\")\n    keep_columns <- as.logical(rowSums(sapply(keep_keywords, grepl,\n                                              names(main_dataset), ignore.case=TRUE)))\n    main_dataset <- main_dataset[,keep_columns]\n\n## Step 3 - Replace numeric contents in the \"Activity\" column of main_dataset\n##          with the corresponding activity form activity_labels\n\n    main_dataset$Activity <- activity_labels[main_dataset$Activity,2]\n\n## Step 4 - Replace some characters in main_dataset column names to make them more\n##          readable and (kind of) user friendly\n\n    colnames(main_dataset) <- c(gsub(\"___|__\",\"_\",names(main_dataset)))\n    last_char <- substr(names(main_dataset),nchar(names(main_dataset)),\n                        nchar(names(main_dataset)))==\"_\"\n    colnames(main_dataset) <- ifelse(last_char,\n                                     substr(names(main_dataset),1,\n                                            nchar(names(main_dataset))-1),\n                                     names(main_dataset))\n    colnames(main_dataset) <- c(gsub(\"BodyBody\",\"Body\",names(main_dataset)))\n    colnames(main_dataset) <- c(gsub(\"tBody\",\"time_Body\",names(main_dataset)))\n    colnames(main_dataset) <- c(gsub(\"fBody\",\"freq_Body\",names(main_dataset)))\n    colnames(main_dataset) <- c(gsub(\"tGravity\",\"time_Gravity\",names(main_dataset)))\n\n## Step 5 - Calculate average for each subject/activity/variable combination\n##          and create a final tidy data set\n##\n##          Output final tidy data set to Summary.txt file (in working directory)\n\n    cat(\"\\tGenerating tidy data set\\n\")\n    library(plyr)\n    summary_dataset <- aggregate(main_dataset[3:length(names(main_dataset))],\n                                 by=list(main_dataset$Subject,main_dataset$Activity),\n                                 mean)\n    colnames(summary_dataset) <- c(\"Subject\",\"Activity\",\n                                   names(main_dataset[3:length(names(main_dataset))]))\n\n    outputfile <- \"Summary.txt\"\n    write.table(summary_dataset, outputfile, row.names=FALSE)\n    cat(paste(\"Analysis completed.\\nResults are in\",outputfile,\"\\n\"))\n}",
    "created" : 1408627899980.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2380653341",
    "id" : "7770588D",
    "lastKnownWriteTime" : 1408727664,
    "path" : "~/Dropbox/Coursera/Data Science/03 - Getting and Cleaning Data/Assignments/Course Project/run_analysis.R",
    "project_path" : "run_analysis.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : true,
    "type" : "r_source"
}